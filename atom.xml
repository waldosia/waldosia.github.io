<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>waldosia的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://waldosia.github.io/"/>
  <updated>2018-07-20T11:38:10.577Z</updated>
  <id>https://waldosia.github.io/</id>
  
  <author>
    <name>waldosia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BFPRT算法之js实现</title>
    <link href="https://waldosia.github.io/2018/05/25/BFPRT%E7%AE%97%E6%B3%95/"/>
    <id>https://waldosia.github.io/2018/05/25/BFPRT算法/</id>
    <published>2018-05-25T03:34:00.000Z</published>
    <updated>2018-07-20T11:38:10.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-BFPRT算法"><a href="#4-BFPRT算法" class="headerlink" title="4.BFPRT算法"></a>4.BFPRT算法</h1><p>解决问题：求一个数组中第k小或第k大的数。复杂度O(n)。<br>　　算法流程：<br>  a)    将数组每5个划成一组；<br>b)    每个组内排序，分别取每一组中的中位数组成一个新的数组；<br>c)    将新的数组进行排序，取其中的中位数a作为参考值；<br>d)    取a对原数组进行比较，把小于a的数放在左边，等于a的放中间，大于a的放右边，看a是否是第k小的数，若不是再从左边或右边重复同一过程。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinKthByBFPRT</span>(<span class="params">arr, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyArr = arr.slice();</span><br><span class="line">    <span class="keyword">return</span> select(copyArr, <span class="number">0</span>, copyArr.length - <span class="number">1</span>, k - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求出arr数组中从begin到end之间的子数组中第i小上的数</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param begin</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @param i</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">arr, begin, end, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (begin === end) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pivot = medianOfMedians(arr, begin, end);</span><br><span class="line">    <span class="keyword">var</span> pivotRange = partition(arr, begin, end, pivot);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= pivotRange[<span class="number">0</span>] &amp;&amp; i &lt;= pivotRange[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; pivotRange[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> select(arr, begin, pivotRange[<span class="number">0</span>] - <span class="number">1</span>, i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> select(arr, pivotRange[<span class="number">1</span>] + <span class="number">1</span>, end, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给数组分组，并求出每组数组中位数，返回中位数组成数组中的中位数</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param begin 原始数组中子数组开始位置</span></span><br><span class="line"><span class="comment"> * @param end  原始数组中子数组结束位置</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;  划分所用的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">medianOfMedians</span>(<span class="params">arr, begin, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = end - begin + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> mArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.ceil(num / <span class="number">5</span>)); <span class="comment">//中位数数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> beginI = begin + i * <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">var</span> endI = beginI + <span class="number">4</span>;</span><br><span class="line">        mArr[i] = getMedian(arr, beginI, <span class="built_in">Math</span>.min(end, endI));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> select(mArr, <span class="number">0</span>, mArr.length - <span class="number">1</span>, <span class="built_in">parseInt</span>(mArr.length / <span class="number">2</span>));<span class="comment">//求中位数数组的上中位数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, begin, end, pivotValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> small = begin - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> cur = begin;</span><br><span class="line">    <span class="keyword">var</span> big = end + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur !== big) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[cur] &lt; pivotValue) &#123;</span><br><span class="line">            swap(arr, ++small, cur++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[cur] &gt; pivotValue) &#123;</span><br><span class="line">            swap(arr, cur, --big)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> range = [];</span><br><span class="line">        range[<span class="number">0</span>] = small + <span class="number">1</span>;</span><br><span class="line">        range[<span class="number">1</span>] = big - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> range;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到五位数组的中位数</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param begin</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMedian</span>(<span class="params">arr, begin, end</span>) </span>&#123;</span><br><span class="line">    insertSort(arr, begin, end);</span><br><span class="line">    <span class="keyword">var</span> sum = end + begin;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.ceil(sum / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> arr[mid];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param begin</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr, begin, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin - <span class="number">1</span>; i &lt; end + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j !== begin; j--) &#123;<span class="comment">//依次将第j个插入到前面排序好的j-1数组中</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j]) &#123;</span><br><span class="line">                swap(arr, j - <span class="number">1</span>, j);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMinKthByBFPRT([<span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">3</span>)); <span class="comment">//5</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-BFPRT算法&quot;&gt;&lt;a href=&quot;#4-BFPRT算法&quot; class=&quot;headerlink&quot; title=&quot;4.BFPRT算法&quot;&gt;&lt;/a&gt;4.BFPRT算法&lt;/h1&gt;&lt;p&gt;解决问题：求一个数组中第k小或第k大的数。复杂度O(n)。&lt;br&gt;　　算法流程：&lt;b
      
    
    </summary>
    
      <category term="算法" scheme="https://waldosia.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://waldosia.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="https://waldosia.github.io/tags/javascript/"/>
    
      <category term="BFPRT" scheme="https://waldosia.github.io/tags/BFPRT/"/>
    
  </entry>
  
  <entry>
    <title>Manacher算法之js实现</title>
    <link href="https://waldosia.github.io/2018/05/13/Manacher%E7%AE%97%E6%B3%95/"/>
    <id>https://waldosia.github.io/2018/05/13/Manacher算法/</id>
    <published>2018-05-13T14:23:00.000Z</published>
    <updated>2018-07-20T11:38:57.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-Manacher算法"><a href="#3-Manacher算法" class="headerlink" title="3.Manacher算法"></a>3.Manacher算法</h1><h2 id="3-1-manacher算法"><a href="#3-1-manacher算法" class="headerlink" title="3.1.    manacher算法"></a>3.1.    manacher算法</h2><p>给定一个字符串，找出其最长回文子串（子串在原字符串必须连续，子序列不一定要连续）.<br>例如：<br>s=”1234”，最长回文长度为 1；<br>s=”12321”，最长回文长度为 5；<br>s=”12332”，最长回文长度为 4，即2332。<br>笨办法：遍历每一个字符，以该字符为中心向两边查找。其时间复杂度为O(n^2)。<br><b>Manacher算法</b>：时间复杂度O(n)<br>a)    因为存在奇回文和偶回文，所以在字符串首尾以及中间插入特殊字符。偶回文则以特殊字符为中心，便可以一起处理。<br>例如：12332加入特殊字符后变成#1#2#3#2#3#，中心为红色的#号。<br>b)    定义一个辅助数组pArr，数组的第i点的值表示以i点为中心时的最大回文半径。<br>例如：</p><p><table><tr><th>str</th><td>#</td><td>1</td><td>#</td><td>2</td><td>#</td><td>3</td><td>#</td><td>3</td><td>#</td><td>2</td><td>#</td></tr><tr><th>pArr</th><td>1</td><td>2</td><td>1</td><td>2</td><td>1</td><td>2</td><td>5</td><td>2</td><td>1</td><td>2</td><td>1</td></tr></table><br>无回文时，以自己为半径，所以半径为1。可以看出pArr-1为该点的最大回文长度。<br>c)    之后就是计算pArr数组的方法。首先以R记录到i点之前所有回文的右边界，index为该右边界所在回文的中心点，则左边界L=index-R。计算i点为半径的最大回文半径时，分四种情况：<br>1）    i点在R的外部，则计算以i点为中心两边的回文长度；<br>2）    i在R的内部，且i关于index的对称点i’的回文左边界在L内部，则i的最大回文半径和i’相等。<br>3）    i在R的内部，且i关于index的对称点i’的回文左边界在L外部，则i的最大回文半径为R-i。<br>4）    i在R的内部，且i关于index的对称点i’的回文左边界与L相等，则i的最小回文半径为R-i，直接比较最小半径以外的数值即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 往字符串中每个字符中间插入#号</span></span><br><span class="line"><span class="comment"> * @param str</span></span><br><span class="line"><span class="comment"> * @returns &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">manacherString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = str.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(str.length * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i !== res.length; i++) &#123;</span><br><span class="line">    res[i] = (i &amp; <span class="number">1</span>) === <span class="number">0</span> ? <span class="string">'#'</span> : arr[index++];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确定字符串中最大回文长度</span></span><br><span class="line"><span class="comment"> * @param str</span></span><br><span class="line"><span class="comment"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxLcpsLength</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr = manacherString(str);  </span><br><span class="line">  <span class="keyword">var</span> pArr = <span class="keyword">new</span> <span class="built_in">Array</span>(arr.length); <span class="comment">//每一点的最大回文半径</span></span><br><span class="line">  <span class="comment">//最右回文的中心点位置</span></span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">//所有回文的最右边界</span></span><br><span class="line">  <span class="keyword">var</span> R = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">//最大回文半径</span></span><br><span class="line">  <span class="keyword">var</span> max = <span class="built_in">Number</span>.MIN_VALUE;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i !== arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//确定i是否在最右回文半径中，若i在半径中，则i的半径至少是对称点半径与i点右边到最大回文半径的最小值；</span></span><br><span class="line">    pArr[i] = R &gt; i ? <span class="built_in">Math</span>.min(pArr[<span class="number">2</span> * index - i], R - i) : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//确认i点回文长度未超过字符串长度，</span></span><br><span class="line">    <span class="keyword">while</span> (i + pArr[i] &lt; arr.length &amp;&amp; i - pArr[i] &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">//确定i点回文半径两边的点是否相等</span></span><br><span class="line">      <span class="keyword">if</span> (arr[i + pArr[i]] === arr[i - pArr[i]]) &#123;</span><br><span class="line">        <span class="comment">//相等时i点回文半径加1，继续循环</span></span><br><span class="line">        pArr[i]++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//不相等时退出循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改最大回文半径时的右边界,与最大回文半径的中心点</span></span><br><span class="line">    <span class="keyword">if</span> (i + pArr[i] &gt; R) &#123;</span><br><span class="line">      R = i + pArr[i];</span><br><span class="line">      index = i;</span><br><span class="line">    &#125;</span><br><span class="line">   max = <span class="built_in">Math</span>.max(max, pArr[i]);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> max<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxLcpsLength(<span class="string">'a123321bcd'</span>));</span><br></pre></td></tr></table></figure></p><h2 id="3-2-Manacher算法扩展题目"><a href="#3-2-Manacher算法扩展题目" class="headerlink" title="3.2.    Manacher算法扩展题目"></a>3.2.    Manacher算法扩展题目</h2><p>　　给定一个字符串str1， 只能往str1的后面添加字符变成str2， 要求str2整体都是回文串且最短。<br>  举例：str1 = ABC12321, 返回ABC12321CBA.<br>  解法：重复manacher算法，当回文最右边界R到达str1的最后一位时，结束manacher算法，然后将str中L外部的子串逆序放在str1后面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-Manacher算法&quot;&gt;&lt;a href=&quot;#3-Manacher算法&quot; class=&quot;headerlink&quot; title=&quot;3.Manacher算法&quot;&gt;&lt;/a&gt;3.Manacher算法&lt;/h1&gt;&lt;h2 id=&quot;3-1-manacher算法&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="https://waldosia.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://waldosia.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="js" scheme="https://waldosia.github.io/tags/js/"/>
    
      <category term="javascript" scheme="https://waldosia.github.io/tags/javascript/"/>
    
      <category term="manacher" scheme="https://waldosia.github.io/tags/manacher/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法之js实现</title>
    <link href="https://waldosia.github.io/2018/05/13/KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://waldosia.github.io/2018/05/13/KMP算法/</id>
    <published>2018-05-13T13:55:00.000Z</published>
    <updated>2018-07-20T11:38:47.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2.KMP算法"></a>2.KMP算法</h1><h2 id="2-1-KMP算法"><a href="#2-1-KMP算法" class="headerlink" title="2.1.    KMP算法"></a>2.1.    KMP算法</h2><p>　　求解问题：有两个字符串str1和str2，寻找str1是否包含str2，并找出包含的起始位置。如str1=12341234d，str2=1234d，则包含的起始位置为4。<br>　　笨办法：假设str2的字符串长度为m，从str1的0位置开始，选取以该位置开头的长度为m的子字符串与str2匹配，若匹配成功，返回该位置，若匹配不成功，则从str1的下一个位置开始继续匹配，直到匹配结束。<br>　　<b>KMP算法</b>：（时间复杂度O(n)）<br>  a)    利用str2建立长度为m的next数组，表示str2对应位置前面字符串的最大前缀和最大后缀的匹配。<br> 　建立规则：取str2的第i个字符，看str2(i)前面的子字符串，其中前缀与后缀相等时的最大长度。其中前缀不能包括子字符串的最后一位，后缀不能包括子字符串的第一位。Next数组以-1和0开头。<br>  举例：str2=12341234d，<br> <table><tbody><tr><th>前后缀长度</th><th>前缀</th><th>后缀</th></tr><tr><td>1</td><td>1</td><td>4</td></tr><tr><td>2</td><td>12</td><td>34</td></tr><tr><td>3</td><td>123</td><td>234</td></tr><tr><td bgcolor="SteelBlue">4</td><td bgcolor="SteelBlue">1234</td><td bgcolor="SteelBlue">1234</td></tr><tr><td>5</td><td>12341</td><td>41234</td></tr><tr><td>6</td><td>123412</td><td>231234</td></tr></tbody></table></p><p><tr><td>7</td><td>1234123</td><td>2341234</td></tr><br>　由上表可知，当长度为4时，前缀与后缀相等，为1234。故该点的next数值为4。<br> b)    建立好str2的next数组时，还是以str1的0位置开始与str2配对，假设在以str1的j位置开始与str2配对时，直到m位置未配对成功，此时str2的m位置最大前后缀为下图橙色区域，橙色区域位置字符串均相等，则下次配对str2直接右移至下图位置，可直接比较C与A是否相等。<br> <img src="/img/kmp.jpg"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KMP算法求解str1是否包含str2，若包含，返回包含的起始位置，若不包含，返回-1；</span></span><br><span class="line"><span class="comment"> * @param str1</span></span><br><span class="line"><span class="comment"> * @param str2</span></span><br><span class="line"><span class="comment"> * @returns &#123;number&#125;</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">KMP</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (str1.length &lt; <span class="number">1</span> || str2.length &lt; <span class="number">1</span> || str1.length &lt; str2.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr1 = str1.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> arr2 = str2.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> i1 = <span class="number">0</span>; <span class="comment">//str1配对索引</span></span><br><span class="line">  <span class="keyword">var</span> i2 = <span class="number">0</span>; <span class="comment">//str2配对索引</span></span><br><span class="line">  <span class="keyword">var</span> next = getNextArray(arr2);</span><br><span class="line">  <span class="keyword">while</span> (i1 &lt; str1.length &amp;&amp; i2 &lt; str2.length) &#123;</span><br><span class="line">     <span class="comment">//i1字符与i2字符配对成功，继续配对下一个</span></span><br><span class="line">     <span class="keyword">if</span> (arr1[i1] === arr2[i2]) &#123;</span><br><span class="line">        i1++;</span><br><span class="line">        i2++;</span><br><span class="line">     <span class="comment">//未配对成功，next数组中只有0位置为-1，所以配对str1下一位</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[i2] === <span class="number">-1</span>) &#123;</span><br><span class="line">        i1++;</span><br><span class="line">     <span class="comment">//未配对成功，str2的最大前缀下一个与i1配对</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        i2 = next[i2];</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> i2 === str2.length ? i1 - i2 : <span class="number">-1</span>;<span class="comment">//i2到头相当于配对成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求解啊arr2的next数组</span></span><br><span class="line"><span class="comment"> * @param arr2</span></span><br><span class="line"><span class="comment"> * @returns &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextArray</span>(<span class="params">arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr2.length === <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> [<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="keyword">new</span> <span class="built_in">Array</span>(arr2.length);</span><br><span class="line">  next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> pos = <span class="number">2</span>; <span class="comment">//str2索引</span></span><br><span class="line">  <span class="keyword">var</span> cn = <span class="number">0</span>;<span class="comment">//比较位置为前一个数的next值</span></span><br><span class="line">  <span class="keyword">while</span> (pos &lt; arr2.length) &#123;</span><br><span class="line">     <span class="comment">//判断前一个数与比较位置最大前缀的后一个数是否相等</span></span><br><span class="line">     <span class="keyword">if</span> (arr2[pos - <span class="number">1</span>] === arr2[cn]) &#123; </span><br><span class="line">       <span class="comment">//相等时该点的next数值则为某个数的next数值+1，继续循环下一个数</span></span><br><span class="line">       next[pos++] = ++cn; </span><br><span class="line">     <span class="comment">//不相等时，取cn位置做为比较位置</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       cn = next[cn];</span><br><span class="line">     <span class="comment">//cn&lt;0时，比较位置为0位置，则该点next值为0</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       next[pos++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(KMP(<span class="string">'12341234a'</span>, <span class="string">'1234a'</span>));<span class="comment">//4</span></span><br></pre></td></tr></table></figure></p><h2 id="2-2-KMP算法扩展题目一"><a href="#2-2-KMP算法扩展题目一" class="headerlink" title="2.2.    KMP算法扩展题目一"></a>2.2.    KMP算法扩展题目一</h2><p>　　给定一个字符串str1，只能往str1的后面添加字符变成str2。<br>  要求1：str2必须包含两个str1，两个str1可以有重合，但是不能以同一个位置开头。<br>  要求2：str2尽量短。<br>  要求返回str2。<br>  举例：<br>str1=123，str2=123123，包含两个str1，且不以相同位置开头，且str2最短。<br>str1=123123，str2=123123123，包含两个str1，且不以相同位置开头，且str2最短。str1=111，str2=1111，包含两个str1，且不以相同位置开头，且str2最短。<br><b>解法</b>：求str1最后一个字符后一个位置的next数值，然后把str1除去最大前缀的剩下字符串放在str1后面就形成str2。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个字符串str1，只能往str1的后面添加字符变成str2。</span></span><br><span class="line"><span class="comment"> * 要求1：str2必须包含两个str1，两个str1可以有重合，但是不能以同一个位置开头。</span></span><br><span class="line"><span class="comment"> * 要求2：str2尽量短。</span></span><br><span class="line"><span class="comment"> * 要求返回str2。</span></span><br><span class="line"><span class="comment"> * @param str1</span></span><br><span class="line"><span class="comment"> * @returns &#123;string&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kmpQuestion1</span>(<span class="params">str1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="keyword">new</span> <span class="built_in">Array</span>(str1.length+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> pos = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> cn = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> arr1 = str1.split(<span class="string">''</span>);</span><br><span class="line">  next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//求next数组</span></span><br><span class="line">  <span class="keyword">while</span>(pos&lt;arr1.length+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr1[pos<span class="number">-1</span>]===arr1[cn])&#123;</span><br><span class="line">      next[pos++]=++cn;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cn&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      cn=next[cn];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      next[pos++]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> str1+str1.substring(cn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(kmpQuestion1(<span class="string">'123123'</span>));<span class="comment">//123123123</span></span><br></pre></td></tr></table></figure></p><h2 id="2-3-KMP算法扩展题目二"><a href="#2-3-KMP算法扩展题目二" class="headerlink" title="2.3.    KMP算法扩展题目二"></a>2.3.    KMP算法扩展题目二</h2><p>　　给定两个二叉树T1和T2， 返回T1的某个子树结构是否与T2的结构相等。<br>  <b>解法</b>：将两个二叉树分别序列化，然后判断T1字符串中是否包含T2字符串。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-KMP算法&quot;&gt;&lt;a href=&quot;#2-KMP算法&quot; class=&quot;headerlink&quot; title=&quot;2.KMP算法&quot;&gt;&lt;/a&gt;2.KMP算法&lt;/h1&gt;&lt;h2 id=&quot;2-1-KMP算法&quot;&gt;&lt;a href=&quot;#2-1-KMP算法&quot; class=&quot;header
      
    
    </summary>
    
      <category term="算法" scheme="https://waldosia.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://waldosia.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="js" scheme="https://waldosia.github.io/tags/js/"/>
    
      <category term="KMP" scheme="https://waldosia.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>基本排序算法之js实现</title>
    <link href="https://waldosia.github.io/2018/05/03/%E7%AE%97%E6%B3%95%E8%A7%86%E9%A2%91%E6%80%BB%E7%BB%93/"/>
    <id>https://waldosia.github.io/2018/05/03/算法视频总结/</id>
    <published>2018-05-03T14:33:00.000Z</published>
    <updated>2018-07-20T11:38:29.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1算法复杂度"><a href="#1算法复杂度" class="headerlink" title="1算法复杂度"></a>1算法复杂度</h1><h2 id="1-1认识时间复杂度"><a href="#1-1认识时间复杂度" class="headerlink" title="1.1认识时间复杂度"></a>1.1认识时间复杂度</h2><p>　　时间复杂度为一个算法流程中，常数操作数量的指标，这个指标叫做O，big O。具体为，如果常数操作数量的表达式中，只要高阶项，不要低阶项，也不要高阶项系数之后，剩下的部分记为f(N)，那么该算法的时间复杂度为O(f(N)).　</p><h2 id="1-2冒泡排序"><a href="#1-2冒泡排序" class="headerlink" title="1.2冒泡排序"></a>1.2冒泡排序</h2><p>　　即大数依次往下沉。需要操作N(N-1)/2次。时间复杂度O(N^2),额外空间复杂度O(1) （与数组长度无关），实现可以做到稳定性（是指一个数组在排完序后值相等的数顺序不会发生变化）。异或——无进位相加；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> e=arr.length<span class="number">-1</span>;e&gt;<span class="number">0</span>;e--)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e; i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            swap(arr,i,i+<span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>)</span>&#123;</span><br><span class="line">   <span class="comment">/*只有在i与j不相等时才能用，且arr内值均为整数，交换两数</span></span><br><span class="line"><span class="comment">   arr[i]=arr[i]^arr[j];</span></span><br><span class="line"><span class="comment">   arr[j]=arr[i]^arr[j];</span></span><br><span class="line"><span class="comment">   arr[i]=arr[i]^arr[j];*/</span></span><br><span class="line">   <span class="keyword">var</span> tmp=arr[i];</span><br><span class="line">   arr[j]=tmp;</span><br><span class="line">   arr[i]=arr[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort([<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-3插入排序"><a href="#1-3插入排序" class="headerlink" title="1.3插入排序"></a>1.3插入排序</h2><p>　　——对比第n个数字与前n-1个排序好的数字，将第n个依次与第n-1、n-2…比较，若小于，则往上浮。将这第n个数字插入到左边排序好的数字其中，类似于扑克牌。时间复杂度O(N^2)，额外空间复杂度O(1)，实现可以做到稳定性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length ; i &lt; l; i++) &#123;<span class="comment">//i为要插入的数</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">          swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(insertSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-4选择排序"><a href="#1-4选择排序" class="headerlink" title="1.4选择排序"></a>1.4选择排序</h2><p>　　——依次选出最小数放在第1,2,3…n个。时间复杂度O(N^2)，额外空间复杂度O(1)，实现可以做到稳定性。<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectioSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> minIndex = i; <span class="comment">//最小数索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; l; j++) &#123;</span><br><span class="line">            minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(selectionSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-5随机快速排序"><a href="#1-5随机快速排序" class="headerlink" title="1.5随机快速排序"></a>1.5随机快速排序</h2><p>　　——随机选一个数，小于它的放左边，等于的放中间，大于的放右边。然后在两边继续随机选数排序。<br>时间复杂度O(n*logn)，额外空间复杂度O(logn)，常规实现做不到稳定性。<br>注意：<br>a)    快速排序中，额外空间复杂度最低为 O(logn)<br>b)    快速排序，可以做到稳定性的实现，但是非常难，不需要掌握<br>c)    荷兰国旗问题的实现，和快速排序中的改进。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomQuickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    arr=quickSort(arr,<span class="number">0</span>,arr.length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">        swap(arr, l + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (r - l + <span class="number">1</span>)), r);<span class="comment">//随机选择一个数放在最后</span></span><br><span class="line">        <span class="keyword">var</span> p = partition(arr, l, r);</span><br><span class="line">        quickSort(arr, l, p[<span class="number">0</span>]); <span class="comment">//小于区排序</span></span><br><span class="line">        quickSort(arr, p[<span class="number">1</span>] + <span class="number">1</span>, r); <span class="comment">//大于区排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> less = l - <span class="number">1</span>;  <span class="comment">//小于区域最后一个</span></span><br><span class="line">    <span class="keyword">var</span> more = r;    <span class="comment">//大于区域最前面一个</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; more) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[l] &lt; arr[r]) &#123;<span class="comment">//小于随机数时，该数与小于区边界后一个交换</span></span><br><span class="line">            swap(arr, ++less, l++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[l] &gt; arr[r]) &#123;<span class="comment">//大于随机数时，该数与大于区前一个数交换</span></span><br><span class="line">            swap(arr, --more, l);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//等于时跳下一个</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, more, r); <span class="comment">//将选择的随机数放到大于区第一个</span></span><br><span class="line">    <span class="keyword">return</span> [less, more]; <span class="comment">//返回小于区和大于区的边界</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randomQuickSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-6归并排序"><a href="#1-6归并排序" class="headerlink" title="1.6归并排序"></a>1.6归并排序</h2><p>——大数组依次对半拆分至单个数再往上合并。<br>时间复杂度 ，额外空间复杂度 ，实现可以做到稳定性。<br>注意：<br>a)    库函数中排序的实现是综合排序，比如插入+快速；比如为了稳定性，排序算法往往是快排+堆排序；<br>b)    归并排序和快速排序，都一定存在非递归的实现；<br>c)    归并排序，存在额外空间复杂度O(1)的实现（内部缓存法），但是非常难，你不需要掌握；<br>d)    归并排序的扩展，小和问题，逆序对。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bigMergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l === r) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取中位数，如果直接用(l+r)/2可能会溢出，而右移相当于除2，而且比除法速度快。</span></span><br><span class="line">    <span class="keyword">var</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    mergeSort(arr, l, mid);</span><br><span class="line">    mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">    merge(arr, l, mid, r); <span class="comment">//排序好的两半合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr, l, m, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, p1 = l, p2 = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">        tmp[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m) &#123;</span><br><span class="line">        tmp[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">        tmp[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">        arr[l + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bigMergeSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><p>小和问题：<br>在随机元素，随机数组大小的数组中，找出左边比右边元素小的所有元素之和。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallSum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l === r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取中位数，如果直接用(l+r)/2可能会溢出，而右移相当于除2，而且比除法速度快。</span></span><br><span class="line">    <span class="keyword">var</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> mergeSort(arr, l, mid) + mergeSort(arr, mid + <span class="number">1</span>, r) + merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr, l, m, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Array</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, p1 = l, p2 = m + <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">        res += arr[p1] &lt; arr[p2] ? (r - p2 + <span class="number">1</span>) * arr[p1] : <span class="number">0</span>; <span class="comment">//提取小和</span></span><br><span class="line">        tmp[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m) &#123;</span><br><span class="line">        tmp[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">        tmp[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">        arr[l + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(smallSum([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-7堆排序"><a href="#1-7堆排序" class="headerlink" title="1.7堆排序"></a>1.7堆排序</h2><p>时间复杂度 ，额外空间复杂度 ，实现做不到稳定性。<br>关键步骤：heapInsert，heapify，堆的扩大和缩小操作。<br>注意：<br>a)    堆排序中，建立堆的操作为O(n)；<br>b)    堆排序的核心数据结构：堆，也可以说是优先级队列；<br>堆：完全二叉树结构<br>大根堆：任何一个节点都是下面整棵树的最大的值。<br>一个节点i，父节点为(i-1)/2，左孩子为2<em>i+1，右孩子为2</em>i+2<br>步骤：先建大根堆，然后堆顶最大值与堆尾互换，新的堆顶下沉，继续建大根堆；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        heapInsert(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> size=arr.length;</span><br><span class="line">    swap(arr,<span class="number">0</span>,--size);</span><br><span class="line">    <span class="keyword">while</span> (size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        heapify(arr,<span class="number">0</span>,size);</span><br><span class="line">        swap(arr,<span class="number">0</span>,--size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建立大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapInsert</span>(<span class="params">arr, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">        swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根顶下沉</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, index, size</span>) </span>&#123;<span class="comment">//下沉操作</span></span><br><span class="line">    <span class="keyword">var</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; size) &#123;<span class="comment">//是否有后代</span></span><br><span class="line">        <span class="comment">//找出较大孩子序号</span></span><br><span class="line">        <span class="keyword">var</span> largest = left + <span class="number">1</span> &lt; size &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">        largest = arr[largest] &gt; arr[index] ? largest : index;<span class="comment">//我以及我孩子中的最大值序号</span></span><br><span class="line">        <span class="keyword">if</span> (largest === index) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, largest, index);</span><br><span class="line">        index = largest;</span><br><span class="line">        left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//互换函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(heapSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="1-8桶排序与基数排序"><a href="#1-8桶排序与基数排序" class="headerlink" title="1.8桶排序与基数排序"></a>1.8桶排序与基数排序</h2><p>时间复杂度O(n)，额外空间复杂度O(n)，实现做到稳定性。<br>注意:<br>a)    桶排序的扩展，排序后的最大相邻数差值问题<br>　解法：数组长度为N，准备N+1个桶，将数组的最大值减最小值的范围均分N+1份，每一份代表桶的范围，依次把数组内的数放入桶内部，求出非空桶内的最小值与前一个非空桶的最大值的差值，其中最大的就为最大相邻数差值。例如数组[1,3,5,11]，最大值减最小值范围是10，则5个桶的范围是[1~3,3~5,5~7,7~9,9~11]。<br>b)    非基于比较的排序，对数据的位数和范围有限制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxGap</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">Number</span>.MIN_VALUE;</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; len; n++) &#123;</span><br><span class="line">       min = <span class="built_in">Math</span>.min(min, arr[n]);</span><br><span class="line">       max = <span class="built_in">Math</span>.max(max, arr[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max === min) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hasNum = <span class="keyword">new</span> <span class="built_in">Array</span>(len + <span class="number">1</span>);<span class="comment">//桶内是否有数数组</span></span><br><span class="line">    <span class="keyword">var</span> maxs = <span class="keyword">new</span> <span class="built_in">Array</span>(len + <span class="number">1</span>);<span class="comment">//桶内最大值数组</span></span><br><span class="line">    <span class="keyword">var</span> mins = <span class="keyword">new</span> <span class="built_in">Array</span>(len + <span class="number">1</span>);<span class="comment">//桶内最小值数组</span></span><br><span class="line">    <span class="keyword">var</span> bid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       bid = bucket(arr[i], len, min, max);</span><br><span class="line">       <span class="comment">//更新桶信息</span></span><br><span class="line">       mins[bid] = hasNum[bid] ? <span class="built_in">Math</span>.min(mins[bid], arr[i]) : arr[i];</span><br><span class="line">       maxs[bid] = hasNum[bid] ? <span class="built_in">Math</span>.max(maxs[bid], arr[i]) : arr[i];</span><br><span class="line">       hasNum[bid] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> lastMax = maxs[<span class="number">0</span>]; <span class="comment">//上一个桶的最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (hasNum[j]) &#123;</span><br><span class="line">          res = <span class="built_in">Math</span>.max(res, mins[j] - lastMax); <span class="comment">//取非空桶与上一个桶的差值中的最大值。</span></span><br><span class="line">            lastMax = maxs[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断数字进第几号桶</span></span><br><span class="line"><span class="comment"> * @param num</span></span><br><span class="line"><span class="comment"> * @param len</span></span><br><span class="line"><span class="comment"> * @param min</span></span><br><span class="line"><span class="comment"> * @param max</span></span><br><span class="line"><span class="comment"> * @returns &#123;Number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucket</span>(<span class="params">num, len, min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>((num - min) * len / (max - min));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxGap([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1算法复杂度&quot;&gt;&lt;a href=&quot;#1算法复杂度&quot; class=&quot;headerlink&quot; title=&quot;1算法复杂度&quot;&gt;&lt;/a&gt;1算法复杂度&lt;/h1&gt;&lt;h2 id=&quot;1-1认识时间复杂度&quot;&gt;&lt;a href=&quot;#1-1认识时间复杂度&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="算法" scheme="https://waldosia.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://waldosia.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="javascript" scheme="https://waldosia.github.io/tags/javascript/"/>
    
      <category term="数据结构" scheme="https://waldosia.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="排序" scheme="https://waldosia.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="冒泡排序" scheme="https://waldosia.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="插入排序" scheme="https://waldosia.github.io/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
      <category term="选择排序" scheme="https://waldosia.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快速排序" scheme="https://waldosia.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆排序" scheme="https://waldosia.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
      <category term="归并排序" scheme="https://waldosia.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>千位分隔符js正则实现</title>
    <link href="https://waldosia.github.io/2018/04/10/%E7%94%B1%E5%8D%83%E4%BD%8D%E5%88%86%E9%9A%94%E7%AC%A6%E5%BC%95%E5%87%BA%E7%9A%84%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95%E5%9B%9E%E9%A1%BE/"/>
    <id>https://waldosia.github.io/2018/04/10/由千位分隔符引出的正则语法回顾/</id>
    <published>2018-04-10T04:04:00.000Z</published>
    <updated>2018-07-20T11:36:12.905Z</updated>
    
    <content type="html"><![CDATA[<p>首先考虑最简单的情况–整数，如123456789，只需考虑字符串从最后一位往前考虑存在3n个数字，且不包括第一位字符，代码如下<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addComma</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num &amp;&amp; num.toString()</span><br><span class="line">.replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">'$1,'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addComma(<span class="number">1234567890</span>));<span class="comment">//1,234,567,890</span></span><br></pre></td></tr></table></figure></p>  <a id="more"></a><p>　　其中<code>(/d)</code>保证3n个字符前存在一个数字，并且可以捕获到该数字，则在该数字后面加上，即可。<code>(?=exp)</code>代表匹配exp前面的位置，所以捕获到的数字与<code>(/d)</code>相同。<code>exp+</code>代表匹配exp一次或多次。<code>$/</code>代表匹配字符串的结束。<br>　　然后考虑更复杂一点的情况–小数，如1234567890.123456，这时需要取到数字的起始位到小数点之间的部分，利用<code>^-?\d+</code>实现，代码如下<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addComma</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> num &amp;&amp; num.toString()</span><br><span class="line">.replace(<span class="regexp">/^-?\d+/</span>,<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m.replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">'$1,'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addComma(<span class="number">1234567890.123456</span>));<span class="comment">//1,234,567,890.123456</span></span><br></pre></td></tr></table></figure></p><p>其中<code>\^</code>匹配字符串的开头。<code>-?</code>代表匹配-号0次或一次。<br>由此，千位分割符即实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先考虑最简单的情况–整数，如123456789，只需考虑字符串从最后一位往前考虑存在3n个数字，且不包括第一位字符，代码如下&lt;br&gt;  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addComma&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num &amp;amp;&amp;amp; num.toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.replace(&lt;span class=&quot;regexp&quot;&gt;/(\d)(?=(\d&amp;#123;3&amp;#125;)+$)/g&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;$1,&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(addComma(&lt;span class=&quot;number&quot;&gt;1234567890&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//1,234,567,890&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://waldosia.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://waldosia.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo文章编写部分语法总结以及hexo使用</title>
    <link href="https://waldosia.github.io/2018/03/09/MarkDown%E9%83%A8%E5%88%86%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://waldosia.github.io/2018/03/09/MarkDown部分语法总结/</id>
    <published>2018-03-09T07:05:00.000Z</published>
    <updated>2018-07-20T10:46:39.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-hexo的使用"><a href="#一-hexo的使用" class="headerlink" title="一.hexo的使用"></a>一.hexo的使用</h2><ul><li><p>1.1 新建一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>1.2. 生成静态文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></li></ul><p>可简写为<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><a id="more"></a><ul><li><p>1.3. 发表草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure></li><li><p>1.4. 部署服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li><li><p>1.5. 部署网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>1.6. 在线编写博客 <a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a></p><h2 id="二-语法总结"><a href="#二-语法总结" class="headerlink" title="二. 语法总结"></a>二. 语法总结</h2></li><li>2.1. 换行<br>上一句 + 3个以上空格 + enter + 下一句。   </li><li>2.2. 缩进<br>换成全角符号的空格。   </li><li>2.3. 标题<br>多个#号 + 空格 + 标题文字<br>#号越多字越小，最多支持6个#号   </li><li>2.4. 列表<br>·有序列表<br>数字. + 空格 + 文本<br>·无序列表<br>+/- + 空格 + 文本   </li><li>2.5. 代码区块（适用于Hexo）<br>3个反引号+语言类型（eg.html,css,javaScript）<br>代码块<br>3个反引号 </li><li>2.6. 行内代码<br>用反引号`包裹住代码即可   </li><li>2.7. 链接<br>[链接文字]+(链接网址)     </li><li>2.8. 文章中均可直接插入HTML元素   </li><li>2.9. 利用tabel插入表格时，需要把标签内的空格都去掉。</li></ul><p>只列了一部分，具体参考<a href="http://www.markdown.cn/" target="_blank" rel="noopener">MarkDown</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-hexo的使用&quot;&gt;&lt;a href=&quot;#一-hexo的使用&quot; class=&quot;headerlink&quot; title=&quot;一.hexo的使用&quot;&gt;&lt;/a&gt;一.hexo的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.1 新建一篇文章&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new [layout] &amp;lt;title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.2. 生成静态文件 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可简写为&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://waldosia.github.io/tags/Hexo/"/>
    
      <category term="MarkDown" scheme="https://waldosia.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>第一个项目部分总结</title>
    <link href="https://waldosia.github.io/2018/03/08/FirstProjectSummary/"/>
    <id>https://waldosia.github.io/2018/03/08/FirstProjectSummary/</id>
    <published>2018-03-08T09:00:00.000Z</published>
    <updated>2018-07-20T11:29:39.163Z</updated>
    
    <content type="html"><![CDATA[<p>1.移动端头部设置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> =<span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2.div占据整个body<br>　方法1：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;    </span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0px</span>;        </span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span>;          </span><br><span class="line">  <span class="attribute">overflow</span>:hidden;    </span><br><span class="line">&#125;   </span><br><span class="line"><span class="selector-id">#divShow</span>&#123;   </span><br><span class="line">  <span class="attribute">position</span>:absolute;     </span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;   </span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;        </span><br><span class="line">  <span class="attribute">background-color</span>:green;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   　方法2：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;      </span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.css3中calc( )函数实现不同单位的运算<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 25<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure></p><p>4.box-sizing属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;    </span><br><span class="line">   <span class="attribute">box-sizing</span>:border-box;    </span><br><span class="line">   <span class="attribute">-moz-box-sizing</span>:border-box; <span class="comment">/* Firefox */</span>    </span><br><span class="line">   <span class="attribute">-webkit-box-sizing</span>:border-box; <span class="comment">/* Safari */</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值描述<br><b>content-box:</b><br>这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。<br><b>border-box:</b><br>为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。<br><b>inherit:</b><br>规定应从父元素继承 box-sizing 属性的值。<br>5.用 JavaScript 准确获取手机屏幕的宽度和高度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportSize</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line"><span class="keyword">return</span> &#123;            </span><br><span class="line">    width:<span class="built_in">window</span>.innerWidth||<span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth,     </span><br><span class="line">    height:<span class="built_in">window</span>.innerHeight||<span class="built_in">document</span>.documentElement.clientHeight||<span class="built_in">document</span>.body.clientHeight     </span><br><span class="line">         &#125;;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>6.div盒子垂直居中<br>1）盒子没有固定的高度<br>方法1：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span>我不知道我的宽度和高是多少，我要实现水平垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;            </span><br><span class="line">    <span class="attribute">position</span>: absolute;            </span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;            </span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;            </span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);            </span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(-50%, -50%);            </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   优点：<br>   1.内容可变高度<br>   2.代码量少<br>   缺点：<br>   1.IE8不支持<br>   2.属性需要写浏览器厂商前缀<br>   3.可能干扰其他transform效果<br>   4.某些情形下会出现文本或元素边界渲染模糊的现象<br>   方法2： 在父级元素上面加上上面3句话，就可以实现子元素水平垂直居中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;            </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">500px</span>;         </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">   <span class="comment">/*只需要在父元素上加这三句*/</span>            </span><br><span class="line">   <span class="attribute">justify-content</span>: center; <span class="comment">/*子元素水平居中*/</span>            </span><br><span class="line">   <span class="attribute">align-items</span>: center; <span class="comment">/*子元素垂直居中*/</span>            </span><br><span class="line">   <span class="attribute">display</span>: -webkit-flex; <span class="comment">/*css3弹性布局*/</span>        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2）盒子有固定的宽和高<br>方案1、margin 负间距<br>此方案代码关键点：1.必需知道该div的宽度和高度，<br>2.然后设置位置为绝对位置， 3.距离页面窗口左边框和上边框的距离设置为50%，这个50%就是指页面窗口的宽度和高度的50%， 4.最后将该div分别左移和上移，左移和上移的大小就是该DIV宽度和高度的一半。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span>我知道我的宽度和高是多少，我要实现水平垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;            </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">18px</span>;            </span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">20px</span>;            </span><br><span class="line">   <span class="attribute">background</span>: orange;            </span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;            </span><br><span class="line">   <span class="attribute">position</span>: absolute;            </span><br><span class="line">   <span class="attribute">top</span>:<span class="number">50%</span>;            </span><br><span class="line">   <span class="attribute">left</span>:<span class="number">50%</span>;            </span><br><span class="line">   <span class="attribute">margin-top</span>: -<span class="number">9px</span>;            </span><br><span class="line">   <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方案2、<br><code>margin:auto</code>实现绝对定位元素的居中（该方法兼容ie8以上浏览器）<br>此方案代码关键点：<br>1、上下左右均0位置定位；<br>2、<code>margin: auto;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span>我不知道我的宽度和高是多少，我要实现水平垂直居中。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;            </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">   <span class="attribute">height</span>: <span class="number">18px</span>;            </span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">20px</span>;            </span><br><span class="line">   <span class="attribute">background</span>: orange;            </span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;            </span><br><span class="line">   <span class="attribute">position</span>: absolute;            </span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;            </span><br><span class="line">   <span class="attribute">right</span>:<span class="number">0</span>;            </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;            </span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;            </span><br><span class="line">  <span class="attribute">margin</span>: auto;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.视口单位主要包括以下4个：  </p><ul><li><b>vw :</b>1vw 等于视口宽度的1%   </li><li><b>vh :</b>1vh 等于视口高度的1%   </li><li><b>vmin :</b> 选取 vw 和 vh 中最小的那个   </li><li><b>vmax :</b> 选取 vw 和 vh 中最大的那个 </li></ul><p>7.页面底部居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.rule</span>&#123;    </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;    </span><br><span class="line"><span class="attribute">position</span>: fixed;    </span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">2vh</span>;    </span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;    </span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>8.JS手机号正则<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myreg=<span class="regexp">/^[1][3,4,5,7,8][0-9]&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure></p><p>9.js中function注释规范<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* [checkMobile 检查号码是否可用]</span></span><br><span class="line"><span class="comment">* @param  &#123;Element&#125; ele   号码输入框</span></span><br><span class="line"><span class="comment">* @param  &#123;string&#125; mbNum</span></span><br><span class="line"><span class="comment">* @param  &#123;Element&#125; pop   弹出框</span></span><br><span class="line"><span class="comment">* @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>10.验证码倒计时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 点击获取验证码禁用函数</span></span><br><span class="line"><span class="comment">* @param &#123;Element&#125; ele  获取验证码按钮</span></span><br><span class="line"><span class="comment">* @param &#123;Number&#125; time  经过time秒时间后才可以重新获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeForbid</span>(<span class="params">ele, time</span>) </span>&#123;</span><br><span class="line">ele.style.backgroundColor = <span class="string">'#999'</span>;</span><br><span class="line">ele.disabled = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(time === <span class="number">0</span>)&#123;</span><br><span class="line">clearInterval(timer);</span><br><span class="line">ele.style.backgroundColor = <span class="string">'#33CCFF'</span>;</span><br><span class="line">ele.innerHTML = <span class="string">'重新获取验证码'</span>;</span><br><span class="line">ele.disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ele.innerHTML = time + <span class="string">"s后重新发送"</span>;</span><br><span class="line">time--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>11.函数内定义全局变量<br>全局环境下定义，函数环境内赋值。<br>12.跨域每次ajax访问后端服务器sessionid不一致问题<br>xhr对象加入withCredentials和crossDomain属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.crossDomain = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>服务器后端设置头部<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">httpResponse.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);  </span><br><span class="line">httpResponse.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"http://192.168.199.240:8081"</span>);  </span><br><span class="line">httpResponse.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"</span>);</span><br></pre></td></tr></table></figure></p><p>注意由于设置了Access-Control-Allow-Credentials: true，因此必须设置Origin不能使用通配符(*)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpResponse.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,request.getHeader(<span class="string">'Origin'</span>));</span><br></pre></td></tr></table></figure></p><p>比较通用的写法，获取请求的头部。<br>13.微信分享接口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;   <span class="comment">//注册微信分享接口</span></span><br><span class="line">debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">appId: obj.data.appid, <span class="comment">// 必填，公众号的唯一标识  后端生成</span></span><br><span class="line">timestamp: obj.data.timestamp, <span class="comment">// 必填，生成签名的时间戳   后端生成</span></span><br><span class="line">nonceStr: obj.data.nonceStr, <span class="comment">// 必填，生成签名的随机串  后端生成</span></span><br><span class="line">signature: obj.data.signature,<span class="comment">// 必填，签名   后端生成</span></span><br><span class="line">jsApiList: [<span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line"><span class="string">'checkJsApi'</span>,</span><br><span class="line"><span class="string">'onMenuShareTimeline'</span>,</span><br><span class="line"><span class="string">'onMenuShareAppMessage'</span></span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">wx.onMenuShareTimeline(&#123;  分享参数设置</span><br><span class="line">title: title, <span class="comment">// 分享标题</span></span><br><span class="line">link: link, <span class="comment">// 分享链接,将当前登录用户转为puid,以便于发展下线</span></span><br><span class="line">imgUrl: root + <span class="string">'/image/logo.png'</span>, <span class="comment">// 分享图标</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">alert(<span class="string">'分享成功'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">alert(<span class="string">'分享失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">wx.onMenuShareAppMessage(&#123;</span><br><span class="line">title: title, <span class="comment">// 分享标题</span></span><br><span class="line">desc: desc,</span><br><span class="line">link: link, <span class="comment">// 分享链接,将当前登录用户转为puid,以便于发展下线</span></span><br><span class="line">imgUrl: root + <span class="string">'/image/logo.png'</span>, <span class="comment">// 分享图标</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">alert(<span class="string">'分享成功'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">alert(<span class="string">'分享失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.移动端头部设置&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目" scheme="https://waldosia.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="html" scheme="https://waldosia.github.io/tags/html/"/>
    
      <category term="css" scheme="https://waldosia.github.io/tags/css/"/>
    
      <category term="javaScript" scheme="https://waldosia.github.io/tags/javaScript/"/>
    
      <category term="微信分享" scheme="https://waldosia.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第一天</title>
    <link href="https://waldosia.github.io/2018/02/23/my-first-blog/"/>
    <id>https://waldosia.github.io/2018/02/23/my-first-blog/</id>
    <published>2018-02-23T13:13:33.000Z</published>
    <updated>2018-07-20T11:29:26.267Z</updated>
    
    <content type="html"><![CDATA[<p>waldosia博客的第一天<br>配置博客出现的一些问题<br>1.hexo init 返回 commond not find<br>解决：将hexo所在路径加入到所在环境变量中<br><a id="more"></a><br>2.发表文章乱码问题<br>解决：language: zh-Hans,.md文件改为UTF-8编码<br>3.文章编辑代码块<br>3个反引号+语言类型（html,css,javascript）<br>代码块<br>3个反引号</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;waldosia博客的第一天&lt;br&gt;配置博客出现的一些问题&lt;br&gt;1.hexo init 返回 commond not find&lt;br&gt;解决：将hexo所在路径加入到所在环境变量中&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
